#include <WiFi.h>
#include <PubSubClient.h>
#include <WiFiManager.h>

const char* ssid = "Elconics";
const char* password = "Elconics@123";

// ThingsBoard MQTT server and device token
const char* thingsboardServer = "broker.emqx.io";
const int mqttPort = 1883;
const char* accessToken = "";  


    String broker_url_value;
    String device_name_value;
    String MQTT_PUBLISH_TOPIC;
    String MQTT_SUBSCRIBE_TOPIC;



WiFiClient wifiClient;
PubSubClient client(wifiClient);

void setupWiFi() 
{
    Serial.begin(115200);
  
    WiFiManager wm;

    WiFi.mode(WIFI_STA);

    delay(1000);

    String mac = WiFi.macAddress();
    const char* mac_id = mac.c_str();

    WiFiManagerParameter broker("param1", "Broker URL", "", 256); // broker
    WiFiManagerParameter device_name("param2", "Device Name", mac_id, 128);
    WiFiManagerParameter mqtt_publish_topic("param3", "MQTT Publish Topic","", 256);  // publish topic
    WiFiManagerParameter mqtt_subscribe_topic("param4", "MQTT Subscribe Topic","", 256);  // subscribe topic

    wm.addParameter(&broker);
    wm.addParameter(&device_name);
    wm.addParameter(&mqtt_publish_topic);
    wm.addParameter(&mqtt_subscribe_topic);

    if (!wm.startConfigPortal(mac_id)) 
    {
        Serial.println("Failed to connect.");
    }

    // Retrieve custom parameter values
     broker_url_value = broker.getValue();
     device_name_value = device_name.getValue();
     MQTT_PUBLISH_TOPIC = mqtt_publish_topic.getValue();
     MQTT_SUBSCRIBE_TOPIC = mqtt_subscribe_topic.getValue();

    Serial.println("Thingsboard URL: " + broker_url_value);
    Serial.println("Device Name: " + device_name_value);
    Serial.println("Publish topic: " + MQTT_PUBLISH_TOPIC);
    Serial.println("Subscribe topic: " + MQTT_SUBSCRIBE_TOPIC);
    Serial.println(WiFi.localIP());

}


void callback(char* topic, byte* payload, unsigned int length) 
{
  Serial.print("Downlink arrived on topic: ");
  Serial.println(topic);

  Serial.print("Downlink Data: ");
  for (int i = 0; i < length; i++) 
  {
    Serial.print((char)payload[i]);
  }
  Serial.println();
}

void reconnect() 
{
  while (!client.connected()) 
  {
    Serial.print("Attempting MQTT connection...");

    if (client.connect("", accessToken, NULL)) 
    {
      Serial.println("connected!");

      client.subscribe(MQTT_SUBSCRIBE_TOPIC.c_str());
    } 
    else 
    {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println("try again in 5 seconds...");
      delay(5000);
    }
  }
}


void sendTelemetry() 
{
  String payload = "{\"value\":764384}";
  Serial.print("Publishing telemetry: ");
  Serial.println(payload);

  client.publish(MQTT_PUBLISH_TOPIC.c_str() , payload.c_str());
}

void setup() 
{
  Serial.begin(115200);

  setupWiFi();

  client.setServer(broker_url_value.c_str(), mqttPort);
  client.setCallback(callback);

  reconnect();
}

void loop() 
{
  if (!client.connected()) 
  {
    reconnect();
  }

  client.loop();

   sendTelemetry();
  delay(2000);
}
